import com.github.rjeschke.txtmark.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"

apply from: "versions.gradle"

if (hasProperty('pub')) {
   File f = new File(pub)
   if (! f.exists()) {
        throw new Exception ("No configuration file named ${pub} found.")
    }
    apply from : pub
} else {
   apply from: "pubconf.gradle"
}

// Consider possible configurations:
if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    apply from: conf

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    println "Using default configuration in 'conf.gradle'"
    apply from: "conf.gradle"
}


group = "edu.holycross.shot"
version = '1.0.2'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}



repositories {
    mavenCentral()

    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}


dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion

    compile group: 'edu.harvard.chs', name: 'cite', version: citeVersion
    compile group: 'net.sf.opencsv', name: 'opencsv', version : opencsvVersion

  //testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'

}


task ttl (type: JavaExec, dependsOn: compileGroovy) {
     description = "Generates RDF representation of all inventoried indices"

    main = "edu.holycross.shot.abracadabra.CiteIndex"
    args = ["${inventory}"]

    classpath sourceSets.main.output.classesDir
    classpath configurations.runtime
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


task cleanTest () {
    doLast {
        File out1 = new File("testdata/testoutput")
        if (out1.exists()) { 
            out1.listFiles().each { f ->
                System.err.println "Delete " + f
                f.delete()
            }
            out1.delete() 
        }
        out1.mkdir()
    }
}

test.doFirst{
  System.out.println "Running ABC tests now...."
  System.out.println "Using CITE version ${citeVersion}."
}


test.dependsOn cleanTest


// for specs with concordion:
/*
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc
  FileTree tree = fileTree(mdSrc) {
	  */
    //include "**/*.md"
	/*
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}
*/
